function fetchUserInfo() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        name: "–ê–ª–µ–∫—Å –ê–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
        bio: "–°—Ç—Ä–æ—é –±—É–¥—É—â–µ–µ, –ø–æ –æ–¥–Ω–æ–º—É —Ü–∏–∫–ª—É –∑–∞ —Ä–∞–∑.",
      });
    }, 1000);
  });
}

function fetchUserTweets() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve([
        "–ö–æ–º–º–∏—á—É –≤ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º. –ß—Ç–æ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ –Ω–µ —Ç–∞–∫?",
        "–ë–∞–≥ –∏–ª–∏ —Ñ–∏—á–∞? ü§î #–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ - —ç—Ç–æ –∫–∞–∫ –∞—Ä—Ö–µ–æ–ª–æ–≥–∏—è.",
      ]);
    }, 1500);
  });
}

function fetchUserFollowers() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (Math.random() > 0.5) {
        resolve(15000);
      } else {
        reject(new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"));
      }
    }, 500);
  });
}

function fetchUserLikes() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(42);
    }, 1000);
  });
}

// –î–ª—è –∑–∞–≤–∏—Å–∏–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤,
// –µ—Å–ª–∏ –ª—é–±–æ–π –ø—Ä–æ–º–∏—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—à–∏–±–∫–æ–∏ÃÜ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–∏—Å—ã –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
async function loadUserProfile() {
  try {
    const [userInfo, tweets, followers, likes] = await Promise.all([
      fetchUserInfo(),
      fetchUserTweets(),
      fetchUserFollowers(),
      fetchUserLikes(),
    ]);
    console.log(`–ò–º—è: ${userInfo.name}`);
    console.log(`–ë–∏–æ: ${userInfo.bio}`);
    console.log(`–¢–≤–∏—Ç—ã: ${tweets.join(",")}`);
    console.log(`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${followers}`);
    console.log(`–õ–∞–∏ÃÜ–∫–∏: ${likes}`);
    return { userInfo, tweets, followers };
  } catch (error) {
    console.log(error);
    throw error;
  }
}


// –î–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –ª—é–±–æ–π –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—à–∏–±–∫–æ–π, —ç—Ç–æ –Ω–µ —Å–ª–æ–º–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ
async function loadUserProfile2() {
  const userPromise = fetchUserInfo().catch(() => ({
    name: "–û—à–∏–±–∫–∞",
    bio: "",
  }));
  const tweetsPromise = fetchUserTweets().catch(() => []);
  const followersPromise = fetchUserFollowers().catch(() => 0);
  const likesPromise = fetchUserLikes().catch(() => 0);

  const [userInfo, tweets, followers, likes] = await Promise.all([
    userPromise,
    tweetsPromise,
    followersPromise,
    likesPromise,
  ]);
  console.log(`–ò–º—è: ${userInfo.name}`);
  console.log(`–ë–∏–æ: ${userInfo.bio}`);
  console.log(`–¢–≤–∏—Ç—ã: ${tweets.join(",")}`);
  console.log(`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${followers}`);
  console.log(`–õ–∞–∏ÃÜ–∫–∏: ${likes}`);
}

// loadUserProfile();
loadUserProfile2();
